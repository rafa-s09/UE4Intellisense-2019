namespace UE4Intellisense.Model
{
    // UnrealEngine\Engine\Source\Runtime\CoreUObject\Public\UObject\ObjectBase.h
    // s|^/// (.*)\n///|/// $1|
    // s|^///* (.*)\n(.*)\,|new UE4Specifier { Name = "$2", Desc = "$1" },|
    internal static class UE4SpecifiersSource
    {
        public static readonly UE4Specifier[] UI = {
            new UE4Specifier { Name = "DependsOn", Desc = "This keyword specifies that this class cannot have its code generated until the given class has been processed." },
            new UE4Specifier { Name = "MinimalAPI", Desc = "This keyword indicates that the interface should be accessible outside of it's module, but does not need all methods exported. It exports only the autogenerated methods required for dynamic_cast<>, etc... to work." },
            new UE4Specifier { Name = "Blueprintable", Desc = "Exposes this interface as an acceptable base class for creating blueprints.  The default is NotBlueprintable, unless inherited otherwise. This is inherited by subclasses." },
            new UE4Specifier { Name = "NotBlueprintable", Desc = "Specifies that this interface is *NOT* an acceptable base class for creating blueprints.  The default is NotBlueprintable, unless inherited otherwise. This is inherited by subclasses." },
            new UE4Specifier { Name = "ConversionRoot", Desc = "Sets IsConversionRoot metadata flag for this interface." }
        };

        public static readonly UE4Specifier[] UC = {
            new UE4Specifier { Name = "classGroup", Desc = "This keyword is used to set the actor group that the class is show in, in the editor." },
            new UE4Specifier { Name = "DependsOn", Desc = "This keyword specifies that this class cannot have its code generated until the given class has been processed." },
            new UE4Specifier { Name = "Within", Desc = "Declares that instances of this class should always have an outer of the specified class.  This is inherited by subclasses unless overridden." }, /* =OuterClassName */
            new UE4Specifier { Group = "BlueprintType", Name = "BlueprintType", Desc = "Exposes this class as a type that can be used for variables in blueprints" },
            new UE4Specifier { Group = "BlueprintType", Name = "NotBlueprintType", Desc = "Prevents this class from being used for variables in blueprints" },
            new UE4Specifier { Group = "Blueprintable", Name = "Blueprintable", Desc = "Exposes this class as an acceptable base class for creating blueprints. The default is NotBlueprintable, unless inherited otherwise. This is inherited by subclasses." },
            new UE4Specifier { Group = "Blueprintable", Name = "NotBlueprintable", Desc = "Specifies that this class is *NOT* an acceptable base class for creating blueprints. The default is NotBlueprintable, unless inherited otherwise. This is inherited by subclasses." },
            new UE4Specifier { Name = "MinimalAPI", Desc = "This keyword indicates that the class should be accessible outside of it's module, but does not need all methods exported. It exports only the autogenerated methods required for dynamic_cast<>, etc... to work." },
            new UE4Specifier { Name = "customConstructor", Desc = "Prevents automatic generation of the constructor declaration." },
            new UE4Specifier { Name = "Intrinsic", Desc = "Class was declared directly in C++ and has no boilerplate generated by UnrealHeaderTool. DO NOT USE THIS FLAG ON NEW CLASSES." },
            new UE4Specifier { Name = "noexport", Desc = "No autogenerated code will be created for this class; the header is only provided to parse metadata from. DO NOT USE THIS FLAG ON NEW CLASSES." },
            new UE4Specifier { Group = "placeable", Name = "placeable", Desc = "Allow users to create and place this class in the editor.  This flag is inherited by subclasses." },
            new UE4Specifier { Group = "placeable", Name = "notplaceable", Desc = "This class cannot be placed in the editor (it cancels out an inherited placeable flag)." },
            new UE4Specifier { Name = "DefaultToInstanced", Desc = "All instances of this class are considered 'instanced'. Instanced classes (components) are duplicated upon construction. This flag is inherited by subclasses. " },
            new UE4Specifier { Name = "Const", Desc = "All properties and functions in this class are const and should be exported as const.  This flag is inherited by subclasses." },
            new UE4Specifier { Name = "Abstract", Desc = "Class is abstract and can't be instantiated directly." },
            new UE4Specifier { Name = "deprecated", Desc = "This class is deprecated and objects of this class won't be saved when serializing.  This flag is inherited by subclasses." },
            new UE4Specifier { Group = "Transient", Name = "Transient", Desc = "This class can't be saved; null it out at save time.  This flag is inherited by subclasses." },
            new UE4Specifier { Group = "Transient", Name = "nonTransient", Desc = "This class should be saved normally (it cancels out an inherited transient flag)." },
            new UE4Specifier { Name = "config", Desc = "Load object configuration at construction time.  These flags are inherited by subclasses. Class containing config properties. Usage config=ConfigName or config=inherit (inherits config name from base class)." },
            new UE4Specifier { Name = "perObjectConfig", Desc = "Handle object configuration on a per-object basis, rather than per-class. " },
            new UE4Specifier { Name = "configdonotcheckdefaults", Desc = "Determine whether on serialize to configs a check should be done on the base/defaults ini's" },
            new UE4Specifier { Name = "defaultconfig", Desc = "Save object config only to Default INIs, never to local INIs." },
            new UE4Specifier { Group = "editinlinenew", Name = "editinlinenew", Desc = "These affect the behavior of the property editor. Class can be constructed from editinline New button." },
            new UE4Specifier { Group = "editinlinenew", Name = "noteditinlinenew", Desc = "Class can't be constructed from editinline New button." },
            new UE4Specifier { Name = "hidedropdown", Desc = "Class not shown in editor drop down for class selection." },
            new UE4Specifier { Group = "showCategories", Name = "showCategories", Desc = "Shows the specified categories in a property viewer. Usage: showCategories=CategoryName or showCategories=(category0, category1, ...)" },
            new UE4Specifier { Group = "showCategories", Name = "hideCategories", Desc = "Hides the specified categories in a property viewer. Usage: hideCategories=CategoryName or hideCategories=(category0, category1, ...)" },
            new UE4Specifier { Name = "ComponentWrapperClass", Desc = "Indicates that this class is a wrapper class for a component with little intrinsic functionality (this causes things like hideCategories and showCategories to be ignored if the class is subclassed in a Blueprint)" },
            new UE4Specifier { Group = "showFunctions", Name = "showFunctions", Desc = "Shows the specified function in a property viewer. Usage: showFunctions=FunctionName or showFunctions=(category0, category1, ...)" },
            new UE4Specifier { Group = "showFunctions", Name = "hideFunctions", Desc = "Hides the specified function in a property viewer. Usage: hideFunctions=FunctionName or hideFunctions=(category0, category1, ...)" },
            new UE4Specifier { Name = "autoExpandCategories", Desc = "Specifies which categories should be automatically expanded in a property viewer." },
            new UE4Specifier { Group = "autoCollapseCategories", Name = "autoCollapseCategories", Desc = "Specifies which categories should be automatically collapsed in a property viewer." },
            new UE4Specifier { Group = "autoCollapseCategories", Name = "dontAutoCollapseCategories", Desc = "Clears the list of auto collapse categories." },
            new UE4Specifier { Group = "collapseCategories", Name = "collapseCategories", Desc = "Display properties in the editor without using categories." },
            new UE4Specifier { Group = "collapseCategories", Name = "dontCollapseCategories", Desc = "Display properties in the editor using categories (default behaviour)." },
            new UE4Specifier { Name = "AdvancedClassDisplay", Desc = "All the properties of the class are hidden in the main display by default, and are only shown in the advanced details section." },
            new UE4Specifier { Name = "ConversionRoot", Desc = "A root convert limits a sub-class to only be able to convert to child classes of the first root class going up the hierarchy." },
            new UE4Specifier { Name = "Experimental", Desc = "Marks this class as 'experimental' (a totally unsupported and undocumented prototype)" },
            new UE4Specifier { Name = "EarlyAccessPreview", Desc = "Marks this class as an 'early access' preview (while not considered production-ready, it's a step beyond 'experimental' and is being provided as a preview of things to come)" }
        };

        public static readonly UE4Specifier[] UF = {
            new UE4Specifier { Name = "BlueprintImplementableEvent", Desc = "This function is designed to be overridden by a blueprint.  Do not provide a body for this function; the autogenerated code will include a thunk that calls ProcessEvent to execute the overridden body." },
            new UE4Specifier { Name = "BlueprintNativeEvent", Desc = "This function is designed to be overridden by a blueprint, but also has a native implementation. Provide a body named [FunctionName]_Implementation instead of [FunctionName]; the autogenerated code will include a thunk that calls the implementation method when necessary." },
            new UE4Specifier { Name = "SealedEvent", Desc = "This function is sealed and cannot be overridden in subclasses. It is only a valid keyword for events; declare other methods as static or final to indicate that they are sealed." },
            new UE4Specifier { Name = "Exec", Desc = "This function is executable from the command line." },
            new UE4Specifier { Name = "Server", Desc = "This function is replicated, and executed on servers.  Provide a body named [FunctionName]_Implementation instead of [FunctionName]; the autogenerated code will include a thunk that calls the implementation method when necessary." },
            new UE4Specifier { Name = "Client", Desc = "This function is replicated, and executed on clients.  Provide a body named [FunctionName]_Implementation instead of [FunctionName]; the autogenerated code will include a thunk that calls the implementation method when necessary." },
            new UE4Specifier { Name = "NetMulticast", Desc = "This function is both executed locally on the server and replicated to all clients, regardless of the Actor's NetOwner" },
            new UE4Specifier { Name = "Reliable", Desc = "Replication of calls to this function should be done on a reliable channel. Only valid when used in conjunction with Client or Server" },
            new UE4Specifier { Name = "Unreliable", Desc = "Replication of calls to this function can be done on an unreliable channel. Only valid when used in conjunction with Client or Server" },
            new UE4Specifier { Name = "BlueprintPure", Desc = "This function fulfills a contract of producing no side effects, and additionally implies BlueprintCallable." },
            new UE4Specifier { Name = "BlueprintCallable", Desc = "This function can be called from blueprint code and should be exposed to the user of blueprint editing tools." },
            new UE4Specifier { Name = "BlueprintAuthorityOnly", Desc = "This function will not execute from blueprint code if running on something without network authority" },
            new UE4Specifier { Name = "BlueprintCosmetic", Desc = "This function is cosmetic and will not run on dedicated servers" },
            new UE4Specifier { Name = "CustomThunk", Desc = "The UnrealHeaderTool code generator will not produce a execFoo thunk for this function; it is up to the user to provide one." },
            new UE4Specifier { Name = "Category", Desc = "Specifies the category of the function when displayed in blueprint editing tools. Usage: Category=CategoryName or Category='MajorCategory,SubCategory'" },
            new UE4Specifier { Name = "WithValidation", Desc = "This function must supply a _Validate implementation" },
            new UE4Specifier { Name = "ServiceRequest", Desc = "This function is RPC service request" },
            new UE4Specifier { Name = "ServiceResponse", Desc = "This function is RPC service response" }
        };

        public static readonly UE4Specifier[] UP = {
            new UE4Specifier { Name = "Const", Desc = "This property is const and should be exported as const." },
            new UE4Specifier { Name = "Config", Desc = "Property should be loaded/saved to ini file as permanent profile." },
            new UE4Specifier { Name = "GlobalConfig", Desc = "Same as above but load config from base class, not subclass." },
            new UE4Specifier { Name = "Localized", Desc = "Property should be loaded as localizable text. Implies ReadOnly." },
            new UE4Specifier { Name = "Transient", Desc = "Property is transient: shouldn't be saved, zero-filled at load time." },
            new UE4Specifier { Name = "DuplicateTransient", Desc = "Property should always be reset to the default value during any type of duplication (copy/paste, binary duplication, etc.)" },
            new UE4Specifier { Name = "NonPIETransient", Desc = "Property should always be reset to the default value unless it's being duplicated for a PIE session - deprecated, use NonPIEDuplicateTransient instead" },
            new UE4Specifier { Name = "NonPIEDuplicateTransient", Desc = "Property should always be reset to the default value unless it's being duplicated for a PIE session" },
            new UE4Specifier { Name = "Ref", Desc = "Value is copied out after function call. Only valid on function param declaration." },
            new UE4Specifier { Name = "Export", Desc = "Object property can be exported with it's owner." },
            new UE4Specifier { Name = "NoClear", Desc = "Hide clear (and browse) button in the editor." },
            new UE4Specifier { Name = "EditFixedSize", Desc = "Indicates that elements of an array can be modified, but its size cannot be changed." },
            new UE4Specifier { Name = "Replicated", Desc = "Property is relevant to network replication." },
            new UE4Specifier { Name = "ReplicatedUsing", Desc = "Property is relevant to network replication. Notify actors when a property is replicated (usage: ReplicatedUsing=FunctionName)." },
            new UE4Specifier { Name = "NotReplicated", Desc = "Skip replication (only for struct members and parameters in service request functions)." },
            new UE4Specifier { Name = "Interp", Desc = "Interpolatable property for use with matinee. Always user-settable in the editor." },
            new UE4Specifier { Name = "NonTransactional", Desc = "Property isn't transacted." },
            new UE4Specifier { Name = "Instanced", Desc = "Property is a component reference. Implies EditInline and Export." },
            new UE4Specifier { Name = "BlueprintAssignable", Desc = "MC Delegates only.  Property should be exposed for assigning in blueprints." },
            new UE4Specifier { Name = "Category", Desc = "Specifies the category of the property. Usage: Category=CategoryName." },
            new UE4Specifier { Name = "SimpleDisplay", Desc = "Properties appear visible by default in a details panel" },
            new UE4Specifier { Name = "AdvancedDisplay", Desc = "Properties are in the advanced dropdown in a details panel" },
            new UE4Specifier { Name = "EditAnywhere", Desc = "Indicates that this property can be edited by property windows in the editor" },
            new UE4Specifier { Name = "EditInstanceOnly", Desc = "Indicates that this property can be edited by property windows, but only on instances, not on archetypes" },
            new UE4Specifier { Name = "EditDefaultsOnly", Desc = "Indicates that this property can be edited by property windows, but only on archetypes" },
            new UE4Specifier { Name = "VisibleAnywhere", Desc = "Indicates that this property is visible in property windows, but cannot be edited at all" },
            new UE4Specifier { Name = "VisibleInstanceOnly", Desc = "Indicates that this property is only visible in property windows for instances, not for archetypes, and cannot be edited" },
            new UE4Specifier { Name = "VisibleDefaultsOnly", Desc = "Indicates that this property is only visible in property windows for archetypes, and cannot be edited" },
            new UE4Specifier { Name = "BlueprintReadOnly", Desc = "This property can be read by blueprints, but not modified." },
            new UE4Specifier { Name = "BlueprintReadWrite", Desc = "This property can be read or written from a blueprint." },
            new UE4Specifier { Name = "AssetRegistrySearchable", Desc = "The AssetRegistrySearchable keyword indicates that this property and it's value will be automatically added to the asset registry for any asset class instances containing this as a member variable.  It is not legal to use on struct properties or parameters." },
            new UE4Specifier { Name = "SaveGame", Desc = "Property should be serialized for save game." },
            new UE4Specifier { Name = "BlueprintCallable", Desc = "MC Delegates only.  Property should be exposed for calling in blueprint code" },
            new UE4Specifier { Name = "BlueprintAuthorityOnly", Desc = "MC Delegates only. This delegate accepts (only in blueprint) only events with BlueprintAuthorityOnly." },
            new UE4Specifier { Name = "TextExportTransient", Desc = "Property shouldn't be exported to text format (e.g. copy/paste)" }
        };

        public static readonly UE4Specifier[] US = {
            new UE4Specifier { Name = "NoExport", Desc = "No autogenerated code will be created for this class; the header is only provided to parse metadata from." },
            new UE4Specifier { Name = "Atomic", Desc = "Indicates that this struct should always be serialized as a single unit" },
            new UE4Specifier { Name = "Immutable", Desc = "Immutable is only legal in Object.h and is being phased out, do not use on new structs!" },
            new UE4Specifier { Name = "BlueprintType", Desc = "Exposes this struct as a type that can be used for variables in blueprints" }
        };

        // Metadata usable in any UField (UCLASS(), USTRUCT(), UPROPERTY(), UFUNCTION(), etc...)
        public static readonly UE4Specifier[] UMGeneric = {
            new UE4Specifier { Name = "ToolTip", Desc = "Overrides the automatically generated tooltip from the class comment" },
            new UE4Specifier { Name = "ShortTooltip", Desc = "A short tooltip that is used in some contexts where the full tooltip might be overwhelming (such as the parent class picker dialog)" }
            };
        // Metadata usable in UCLASS
        public static readonly UE4Specifier[] UMC = {
            new UE4Specifier { Name = "BlueprintSpawnableComponent", Desc = "[ClassMetadata] Used for Actor Component classes. If present indicates that it can be spawned by a Blueprint." },
            new UE4Specifier { Name = "ChildCanTick", Desc = "[ClassMetadata] Used for Actor and Component classes. If the native class cannot tick, Blueprint generated classes based this Actor or Component can have bCanEverTick flag overridden even if bCanBlueprintsTickByDefault is false." },
            new UE4Specifier { Name = "ChildCannotTick", Desc = "[ClassMetadata] Used for Actor and Component classes. If the native class cannot tick, Blueprint generated classes based this Actor or Component can never tick even if bCanBlueprintsTickByDefault is true." },
            new UE4Specifier { Name = "IgnoreCategoryKeywordsInSubclasses", Desc = "[ClassMetadata] Used to make the first subclass of a class ignore all inherited showCategories and hideCategories commands" },
            new UE4Specifier { Name = "DeprecatedNode", Desc = "[ClassMetadata] For BehaviorTree nodes indicates that the class is deprecated and will display a warning when compiled." },
            new UE4Specifier { Name = "DeprecationMessage", Desc = "[ClassMetadata] [FunctionMetadata] Used in conjunction with DeprecatedNode or DeprecatedFunction to customize the warning message displayed to the user." },
            new UE4Specifier { Name = "DisplayName", Desc = "[ClassMetadata] [PropertyMetadata] [FunctionMetadata] The name to display for this class, property, or function instead of auto-generating it from the name." },
            new UE4Specifier { Name = "IsBlueprintBase", Desc = "[ClassMetadata] Specifies that this class is an acceptable base class for creating blueprints." },
            new UE4Specifier { Name = "KismetHideOverrides", Desc = "[ClassMetadata] Comma delimited list of blueprint events that are not be allowed to be overridden in classes of this type" },
            new UE4Specifier { Name = "ProhibitedInterfaces", Desc = "[ClassMetadata] Specifies interfaces that are not compatible with the class." },
            new UE4Specifier { Name = "RestrictedToClasses", Desc = "[ClassMetadata] Used by BlueprintFunctionLibrary classes to restrict the graphs the functions in the library can be used in to the classes specified." },
            new UE4Specifier { Name = "ShowWorldContextPin", Desc = "[ClassMetadata] Indicates that when placing blueprint nodes in graphs owned by this class that the hidden world context pin should be visible because the self context of the class cannot                 provide the world context and it must be wired in manually" },
            new UE4Specifier { Name = "DontUseGenericSpawnObject", Desc = "[ClassMetadata] Do not spawn an object of the class using Generic Create Object node in Blueprint. It makes sense only for a BluprintType class, that is neither Actor, nor ActorComponent." },
            new UE4Specifier { Name = "ExposedAsyncProxy", Desc = "[ClassMetadata] Expose a proxy object of this class in Async Task node." }
            };
        // Metadata usable in USTRUCT
        public static readonly UE4Specifier[] UMS = {
            new UE4Specifier { Name = "HasNativeBreak", Desc = "[StructMetadata] Indicates that the struct has a custom break node (and what the path to the BlueprintCallable UFunction is) that should be used instead of the default BreakStruct node.  " },
            new UE4Specifier { Name = "HasNativeMake", Desc = "[StructMetadata] Indicates that the struct has a custom make node (and what the path to the BlueprintCallable UFunction is) that should be used instead of the default MakeStruct node.  " },
            new UE4Specifier { Name = "HiddenByDefault", Desc = "[StructMetadata] Pins in Make and Break nodes are hidden by default." }
        };
        // Metadata usable in UPROPERTY for customizing the behavior when displaying the property in a property panel
        public static readonly UE4Specifier[] UMP = {
            new UE4Specifier { Name = "AllowAbstract", Desc = "[PropertyMetadata] Used for FStringClassReference properties.  Indicates whether abstract class types should be shown in the class picker." },
            new UE4Specifier { Name = "AllowedClasses", Desc = "[PropertyMetadata] Used for FStringAssetReference properties.  Comma delimited list that indicates the class type(s) of assets to be displayed in the asset picker." },
            new UE4Specifier { Name = "AllowPreserveRatio", Desc = "[PropertyMetadata] Used for FVector properties.  It causes a ratio lock to be added when displaying this property in details panels." },
            new UE4Specifier { Name = "ArrayClamp", Desc = "[PropertyMetadata] Used for integer properties.  Clamps the valid values that can be entered in the UI to be between 0 and the length of the array specified." },
            new UE4Specifier { Name = "ClampMin", Desc = "[PropertyMetadata] Used for float and integer properties.  Specifies the minimum value that may be entered for the property." },
            new UE4Specifier { Name = "ClampMax", Desc = "[PropertyMetadata] Used for float and integer properties.  Specifies the maximum value that may be entered for the property." },
            new UE4Specifier { Name = "DisplayThumbnail", Desc = "[PropertyMetadata] Indicates that the property is an asset type and it should display the thumbnail of the selected asset." },
            new UE4Specifier { Name = "EditCondition", Desc = "[PropertyMetadata] Specifies a boolean property that is used to indicate whether editing of this property is disabled." },
            new UE4Specifier { Name = "ExactClass", Desc = "[PropertyMetadata] Used for FStringAssetReference properties in conjunction with AllowedClasses. Indicates whether only the exact classes specified in AllowedClasses can be used or whether subclasses are valid." },
            new UE4Specifier { Name = "ExposeFunctionCategories", Desc = "[PropertyMetadata] Specifies a list of categories whose functions should be exposed when building a function list in the Blueprint Editor." },
            new UE4Specifier { Name = "ExposeOnSpawn", Desc = "[PropertyMetadata] Specifies whether the property should be exposed on a Spawn Actor for the class type." },
            new UE4Specifier { Name = "FixedIncrement", Desc = "[PropertyMetadata] Deprecated." },
            new UE4Specifier { Name = "HideAlphaChannel", Desc = "[PropertyMetadata] Used for FColor and FLinearColor properties. Indicates that the Alpha property should be hidden when displaying the property widget in the details." },
            new UE4Specifier { Name = "InlineEditConditionToggle", Desc = "[PropertyMetadata] Signifies that the bool property is only displayed inline as an edit condition toggle in other properties, and should not be shown on its own row." },
            new UE4Specifier { Name = "IsBlueprintBaseOnly", Desc = "[PropertyMetadata] Used for FStringClassReference properties.  Indicates whether only blueprint classes should be shown in the class picker." },
            new UE4Specifier { Name = "OnlyPlaceable", Desc = "[PropertyMetadata] Used for Subclass properties. Indicates whether only placeable classes should be shown in the class picker." },
            new UE4Specifier { Name = "MakeEditWidget", Desc = "[PropertyMetadata] Used for Transform/Rotator properties (also works on arrays of them). Indicates that the property should be exposed in the viewport as a movable widget." },
            new UE4Specifier { Name = "MakeStructureDefaultValue", Desc = "[PropertyMetadata] For properties in a structure indicates the default value of the property in a blueprint make structure node." },
            new UE4Specifier { Name = "MetaClass", Desc = "[PropertyMetadata] Used FStringClassReference properties. Indicates the parent class that the class picker will use when filtering which classes to display." },
            new UE4Specifier { Name = "Multiple", Desc = "[PropertyMetadata] Used for numeric properties. Stipulates that the value must be a multiple of the metadata value." },
            new UE4Specifier { Name = "MultiLine", Desc = "[PropertyMetadata] Used for FString and FText properties.  Indicates that the edit field should be multi-line, allowing entry of newlines." },
            new UE4Specifier { Name = "PasswordField", Desc = "[PropertyMetadata] Used for FString and FText properties.  Indicates that the edit field is a secret field (e.g a password) and entered text will be replaced with dots. Do not use this as your only security measure.  The property data is still stored as plain text. " },
            new UE4Specifier { Name = "NoElementDuplicate", Desc = "[PropertyMetadata] Used for array properties. Indicates that the duplicate icon should not be shown for entries of this array in the property panel." },
            new UE4Specifier { Name = "NoSpinbox", Desc = "[PropertyMetadata] Used for integer and float properties. Indicates that the spin box element of the number editing widget should not be displayed." },
            new UE4Specifier { Name = "FilePathFilter", Desc = "[PropertyMetadata] Used by FFilePath properties. Indicates the path filter to display in the file picker." },
            new UE4Specifier { Name = "RelativePath", Desc = "[PropertyMetadta] Used by FDirectoryPath properties. Indicates that the directory dialog will output a relative path when setting the property." },
            new UE4Specifier { Name = "RelativeToGameContentDir", Desc = "[PropertyMetadta] Used by FDirectoryPath properties. Indicates that the directory dialog will output a path relative to the game content directory when setting the property." },
            new UE4Specifier { Name = "ContentDir", Desc = "[PropertyMetadta] Used by FDirectoryPath properties. Indicates that the path will be picked using the Slate-style directory picker inside the game Content dir." },
            new UE4Specifier { Name = "ShowOnlyInnerProperties", Desc = "[PropertyMetadata] Used by struct properties. Indicates that the inner properties will not be shown inside an expandable struct, but promoted up a level." },
            new UE4Specifier { Name = "SliderExponent", Desc = "[PropertyMetadata] Used by numeric properties. Indicates how rapidly the value will grow when moving an unbounded slider." },
            new UE4Specifier { Name = "UIMin", Desc = "[PropertyMetadata] Used for float and integer properties.  Specifies the lowest that the value slider should represent." },
            new UE4Specifier { Name = "UIMax", Desc = "[PropertyMetadata] Used for float and integer properties.  Specifies the highest that the value slider should represent." },
            new UE4Specifier { Name = "ConfigHierarchyEditable", Desc = "[PropertyMetadata] Property is serialized to config and we should be able to set it anywhere along the config hierarchy." },
            new UE4Specifier { Name = "BlueprintCompilerGeneratedDefaults", Desc = "[PropertyMetadata] Property defaults are generated by the Blueprint compiler and will not be copied when CopyPropertiesForUnrelatedObjects is called post-compile." },
            new UE4Specifier { Name = "LongPackageName", Desc = "[PropertyMetadata] Used by FDirectoryPath properties.  Converts the path to a long package name" }
        };
        // Metadata usable in UPROPERTY for customizing the behavior of Persona and UMG
        // TODO: Move this to be contained in those modules specifically?
        public static UE4Specifier[] UMPP = {
            new UE4Specifier { Name = "NeverAsPin", Desc = "[PropertyMetadata] The property is not exposed as a data pin and is only be editable in the details panel. Applicable only to properties that will be displayed in Persona and UMG." },
            new UE4Specifier { Name = "PinHiddenByDefault", Desc = "[PropertyMetadata] The property can be exposed as a data pin, but is hidden by default. Applicable only to properties that will be displayed in Persona and UMG." },
            new UE4Specifier { Name = "PinShownByDefault", Desc = "[PropertyMetadata] The property can be exposed as a data pin and is visible by default. Applicable only to properties that will be displayed in Persona and UMG." },
            new UE4Specifier { Name = "AlwaysAsPin", Desc = "[PropertyMetadata] The property is always exposed as a data pin. Applicable only to properties that will be displayed in Persona and UMG." },
            new UE4Specifier { Name = "CustomizeProperty", Desc = "[PropertyMetadata] Indicates that the property has custom code to display and should not generate a standard property widget int he details panel. Applicable only to properties that will be displayed in Persona." }
            };
        // Metadata usable in UPROPERTY for customizing the behavior of Material Expressions
        // TODO: Move this to be contained in that module?
        public static UE4Specifier[] UMPM = {
            new UE4Specifier { Name = "OverridingInputProperty", Desc = "[PropertyMetadata] Used for float properties in MaterialExpression classes. If the specified FMaterialExpression pin is not connected, this value is used instead." },
            new UE4Specifier { Name = "RequiredInput", Desc = "[PropertyMetadata] Used for FMaterialExpression properties in MaterialExpression classes. If specified the pin need not be connected and the value of the property marked as OverridingInputProperty will be used instead." }
        };

        // Metadata usable in UFUNCTION
        public static readonly UE4Specifier[] UMF = {
            new UE4Specifier { Name = "AdvancedDisplay", Desc = "[FunctionMetadata] Used with a comma-separated list of parameter names that should show up as advanced pins (requiring UI expansion). Alternatively you can set a number, which is the number of paramaters from the start that should *not* be marked as advanced (eg 'AdvancedDisplay=2' will mark all but the first two advanced)." },
            new UE4Specifier { Name = "ArrayParm", Desc = "[FunctionMetadata] Indicates that a BlueprintCallable function should use a Call Array Function node and that the parameters specified in the comma delimited list should be treated as wild card array properties." },
            new UE4Specifier { Name = "ArrayTypeDependentParams", Desc = "[FunctionMetadata] Used when ArrayParm has been specified to indicate other function parameters that should be treated as wild card properties linked to the type of the array parameter." },
            new UE4Specifier { Name = "AutoCreateRefTerm", Desc = "[FunctionMetadata]" },
            new UE4Specifier { Name = "BlueprintInternalUseOnly", Desc = "[FunctionMetadata] This function is an internal implementation detail, used to implement another function or node.  It is never directly exposed in a graph." },
            new UE4Specifier { Name = "BlueprintProtected", Desc = "[FunctionMetadata] This function can only be called on 'this' in a blueprint. It cannot be called on another instance." },
            new UE4Specifier { Name = "CallableWithoutWorldContext", Desc = "[FunctionMetadata] Used for BlueprintCallable functions that have a WorldContext pin to indicate that the function can be called even if the class does not implement the virtual function GetWorld()." },
            new UE4Specifier { Name = "CommutativeAssociativeBinaryOperator", Desc = "[FunctionMetadata] Indicates that a BlueprintCallable function should use the Commutative Associative Binary node." },
            new UE4Specifier { Name = "CompactNodeTitle", Desc = "[FunctionMetadata] Indicates that a BlueprintCallable function should display in the compact display mode and the name to use in that mode." },
            new UE4Specifier { Name = "CustomStructureParam", Desc = "[FunctionMetadata]" },
            new UE4Specifier { Name = "DefaultToSelf", Desc = "[FunctionMetadata] For BlueprintCallable functions indicates that the object property named's default value should be the self context of the node" },
            new UE4Specifier { Name = "DeprecatedFunction", Desc = "[FunctionMetadata] This function is deprecated, any blueprint references to it cause a compilation warning." },
            new UE4Specifier { Name = "ExpandEnumAsExecs", Desc = "[FunctionMetadata] For BlueprintCallable functions indicates that an input exec pin should be created for each entry in the enum specified." },
            new UE4Specifier { Name = "HidePin", Desc = "[FunctionMetadata] For BlueprintCallable functions indicates that the parameter pin should be hidden from the user's view." },
            new UE4Specifier { Name = "HideSpawnParms", Desc = "[FunctionMetadata]" },
            new UE4Specifier { Name = "Keywords", Desc = "[FunctionMetadata] For BlueprintCallable functions provides additional keywords to be associated with the function for search purposes." },
            new UE4Specifier { Name = "Latent", Desc = "[FunctionMetadata] Indicates that a BlueprintCallable function is Latent" },
            new UE4Specifier { Name = "LatentInfo", Desc = "[FunctionMetadata] For Latent BlueprintCallable functions indicates which parameter is the LatentInfo parameter" },
            new UE4Specifier { Name = "MaterialParameterCollectionFunction", Desc = "[FunctionMetadata] For BlueprintCallable functions indicates that the material override node should be used" },
            new UE4Specifier { Name = "NativeBreakFunc", Desc = "[FunctionMetadata] For BlueprintCallable functions indicates that the function should be displayed the same as the implicit Break Struct nodes" },
            new UE4Specifier { Name = "NativeMakeFunc", Desc = "[FunctionMetadata] For BlueprintCallable functions indicates that the function should be displayed the same as the implicit Make Struct nodes" },
            new UE4Specifier { Name = "UnsafeDuringActorConstruction", Desc = "[FunctionMetadata] Used by BlueprintCallable functions to indicate that this function is not to be allowed in the Construction Script." },
            new UE4Specifier { Name = "WorldContext", Desc = "[FunctionMetadta] Used by BlueprintCallable functions to indicate which parameter is used to determine the World that the operation is occurring within." },
            new UE4Specifier { Name = "BlueprintAutocast", Desc = "[FunctionMetadta] Used only by static BlueprintPure functions from BlueprintLibrary. A cast node will be automatically added for the return type and the type of the first parameter of the function." }
        };

        // Metadata usable in UINTERFACE
        public static readonly UE4Specifier[] UMI = {
            new UE4Specifier { Name = "CannotImplementInterfaceInBlueprint", Desc = "[InterfaceMetadata] This interface cannot be implemented by a blueprint (e.g., it has only non-exposed C++ member methods)" }
        };
    }
}
